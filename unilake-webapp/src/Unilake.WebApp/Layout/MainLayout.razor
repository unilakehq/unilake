@using Unilake.WebApp.DesignSystem
@using Unilake.WebApp.Services
@inherits LayoutComponentBase

<div class="@AppClass">
    @* containers *@
    <ModalContainer/>
    @* topnav *@
    <Topnav OnSideNavToggle="ToggleSidebarNav" OnDarkModeToggle="ToggleDarkMode" IsDarkMode="StateService.GetState<bool>(State.DarkMode)">
        <LeftContent>
            <Button Variant="ButtonVariant.Bravo">search button</Button>
        </LeftContent>
        <ChildContent>
            -
        </ChildContent>
        <RightContent>
            -
        </RightContent>
    </Topnav>
    <div class="bg-neutral-background-default dark:bg-neutral-background-dark-default text-typography-body dark:text-typography-dark-body flex flex-row pt-12 h-screen">
        @* content containers *@
        <ToastContainer/>
        <OffcanvasContainer/>
        @* navbar *@
        <SidebarNav IsCollapsed="StateService.GetState<bool>(State.SideNavCollapsed)" NavItems="StateService.GetState<IEnumerable<NavItem>>(State.NavigationMenu)"/>
        @* content *@
        <main class="w-full overflow-y-auto">
            @* page body *@
            <div class="pl-6 pt-3">
                @Body
            </div>
        </main>
    </div>
</div>

@code
{
    [Inject] public required StateService StateService { get; init; }
    private Task ToggleDarkMode() => StateService.DispatchStateEvent<bool>(State.DarkMode, x => !x);
    private Task ToggleSidebarNav() => StateService.DispatchStateEvent<bool>(State.SideNavCollapsed, x => !x);
    string AppClass => new ClassBuilder()
        .AddIfElse("dark", StateService.GetState<bool>(State.DarkMode), "")
        .ToString();
}
