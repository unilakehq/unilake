@using Unilake.WebApp.DesignSystem
@attribute [Route(DeepLinks.WeatherPage)]
@inject HttpClient Http

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<div class="mx-4 my-4">
    <button class="@ClassNames flex gap-2" @onmouseenter="() => OnMouseOver(true)" @onmouseleave="() => OnMouseOver(false)">
        Save Changes <Icon IconInstance="AnronIcons.Ai"></Icon>
    </button>
</div>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th aria-label="Temperature in Celsius">Temp. (C)</th>
                <th aria-label="Temperature in Farenheit">Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;
    private bool _onmouseover = false;

    private string ClassNames => new ClassBuilder("transition ease-in-out delay-150 duration-500")
        .AddIf("-translate-y-1 scale-110 bg-indigo-500", _onmouseover)
        .AddIf("bg-blue-500", !_onmouseover)
        .ToString();

    private Task OnMouseOver(bool over)
    {
        _onmouseover = over;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    }

    public class WeatherForecast
    {
        public DateOnly Date { get; set; }

        public int TemperatureC { get; set; }

        public string? Summary { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
