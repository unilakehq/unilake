#
# docker-compose base file, used for local development and local deployments
#

services:
  db:
    container_name: unilake_db
    image: postgres:17-alpine3.21
    restart: always
    environment:
      POSTGRES_USER: unilake 
      POSTGRES_PASSWORD: unilake 
    healthcheck:
        test: ['CMD-SHELL', 'pg_isready -U unilake']
        interval: 5s
        timeout: 5s

  redis:
      container_name: unilake_redis
      image: redis:8.0-M02-alpine
      restart: on-failure
      command: redis-server --maxmemory-policy allkeys-lru --maxmemory 200mb
      healthcheck:
          test: ['CMD', 'redis-cli', 'ping']
          interval: 3s
          timeout: 10s
          retries: 10

  minio:
    container_name: unilake_minio 
    image: minio/minio:latest
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    entrypoint: sh
    command: '-c ''mkdir -p /minio_data/starrocks && minio server /minio_data --console-address ":9001"'''

  starrocks-fe:
    container_name: unilake_starrocks_fe
    image: starrocks/fe-ubuntu:3.4-latest
    hostname: starrocks-fe
    user: root
    command: >
      bash -c "echo run_mode=shared_data >> /opt/starrocks/fe/conf/fe.conf &&
      echo aws_s3_path=starrocks >> /opt/starrocks/fe/conf/fe.conf &&
      echo aws_s3_endpoint=minio:9000 >> /opt/starrocks/fe/conf/fe.conf &&
      echo aws_s3_use_instance_profile=false >> /opt/starrocks/fe/conf/fe.conf &&
      echo cloud_native_storage_type=S3 >> /opt/starrocks/fe/conf/fe.conf &&
      echo aws_s3_use_aws_sdk_default_behavior=true >> /opt/starrocks/fe/conf/fe.conf &&
      bash /opt/starrocks/fe/bin/start_fe.sh"
    healthcheck:
      test: 'mysql -uroot -h starrocks-fe -P 9030 -e "show frontends\G" |grep "Alive: true"'
      interval: 10s
      timeout: 5s
      retries: 3
    depends_on:
      minio:
        condition: service_healthy

  starrocks-cn:
    container_name: unilake_starrocks_cn
    image: starrocks/cn-ubuntu:3.4-latest
    command:
      - /bin/bash
      - -c
      - |
        sleep 15s;
        mysql --connect-timeout 2 -h starrocks-fe -P9030 -uroot -e "ALTER SYSTEM ADD COMPUTE NODE \"starrocks-cn:9050\";"
        /opt/starrocks/cn/bin/start_cn.sh
    hostname: starrocks-cn
    user: root
    depends_on:
      starrocks-fe:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: 'mysql -uroot -h starrocks-fe -P 9030 -e "SHOW COMPUTE NODES\G" |grep "Alive: true"'
      interval: 10s
      timeout: 5s
      retries: 3

  opensearch:
    container_name: unilake_opensearch
    image: opensearchproject/opensearch:latest
    environment:
      - cluster.name=opensearch-cluster 
      - node.name=opensearch-node1 
      - discovery.seed_hosts=opensearch-node1
      - cluster.initial_cluster_manager_nodes=opensearch-node1
      - bootstrap.memory_lock=true 
      - "OPENSEARCH_JAVA_OPTS=-Xms512m -Xmx512m"
      - OPENSEARCH_INITIAL_ADMIN_PASSWORD=Unilake_P@ssword_1988
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536

  zookeeper:
    container_name: unilake_zookeeper
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    container_name: unilake_kafka
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  kafka_ui:
      container_name: unilake_kafka_ui
      image: provectuslabs/kafka-ui:latest
      restart: on-failure
      environment:
          KAFKA_CLUSTERS_0_NAME: local
          KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
          DYNAMIC_CONFIG_ENABLED: 'true'

  gravitino:
    container_name: unilake_gravitino 
    image: apache/gravitino:0.7.0-incubating
    entrypoint: /bin/bash /tmp/gravitino/init.sh
    volumes:
      - ./conf/gravitino:/tmp/gravitino
    healthcheck:
      test: ["CMD", "/tmp/gravitino/healthcheck.sh"]
      interval: 5s
      timeout: 60s
      retries: 5
      start_period: 20s