@namespace Unilake.WebApp.DesignSystem.Components
@inherits UnilakeBaseComponent

<button class="@ClassNames"
        @onclick="OnClick">
    <div class="flex gap-2">
        @if (NavItem.LeftIcon != null)
        {
            <div class="@LeftIconClassNames">
                <Icon IconInstance="NavItem.LeftIcon" Size="20"></Icon>
            </div>
        }
        @if (!IsIconOnly)
        {
            <div class="@LabelClassNames">
                @NavItem.Label
            </div>
        }
    </div>
    @if (!IsIconOnly)
    {
        <div class="flex gap-2">
            @if (NavItem.Badge != null)
            {
                <div class="@BadgeClassNames">
                    <Badge BadgeTheme="BadgeTheme.Custom">@NavItem.Badge</Badge>
                </div>
            }
            @if (RightIcon != null)
            {
                <div class="@RightIconClassNames">
                    <Icon IconInstance="RightIcon" Size="20"></Icon>
                </div>
            }
        </div>
    }
</button>

@code {
    [Inject]
    public required NavigationManager Nav { get; init; }

    [Parameter, EditorRequired] public required NavItem NavItem { get; set; }
    [Parameter] public bool IsIconOnly { get; set; }

    protected override string ClassNames => ClassBuilder
        .Add("flex py-2 text-default group")
        .AddIf("px-2 rounded-lg w-10 h-10", IsIconOnly)
        .AddIf("h-10 justify-between px-4", !IsIconOnly)
        .AddIf("border-r-2 border-feedback-brand-background dark:border-feedback-dark-brand-background bg-brand-light-menu-item-interaction dark:bg-brand-dark-menu-item-interaction", NavItem is { State: MenuItemState.Active } && !IsIconOnly)
        .AddIf("hover:bg-brand-light-menu-item-interaction dark:hover:bg-brand-dark-menu-item-interaction w-[200px]",NavItem.State != MenuItemState.Disabled && NavItem.State != MenuItemState.ActiveClosed && NavItem.State != MenuItemState.ActiveOpened)
        .AddIf("w-[198px]", !IsIconOnly && NavItem.State == MenuItemState.Active)
        .AddIf("w-[200px]", !IsIconOnly && NavItem.State != MenuItemState.Disabled)
        .AddIf("justify-center items-top w-[50px]", IsIconOnly)
        .ToString();

    private string LeftIconClassNames => new ClassBuilder("flex items-center")
        .AddIf("text-typography-icon dark:text-typography-dark-icon group-hover:text-brand-light-interaction dark:group-hover:text-brand-dark-interaction", NavItem.State is MenuItemState.Default or MenuItemState.Opened)
        .AddIf("text-brand-light-interaction dark:text-brand-dark-interaction", NavItem.State is MenuItemState.ActiveClosed or MenuItemState.ActiveOpened)
        .AddCompare("text-brand-light-interaction dark:text-brand-dark-interaction", NavItem.State, MenuItemState.Active)
        .AddCompare("text-typography-disabled dark:text-typography-dark-disabled", NavItem.State, MenuItemState.Disabled)
        .ToString();

    private string LabelClassNames => new ClassBuilder("font-semibold")
        .AddIf("text-typography-headline dark:text-typography-dark-headline group-hover:text-brand-light-interaction dark:group-hover:text-brand-dark-interaction", NavItem.State is MenuItemState.Default or MenuItemState.Opened)
        .AddIf("text-brand-light-interaction dark:text-brand-dark-interaction", NavItem.State is MenuItemState.ActiveClosed or MenuItemState.ActiveOpened)
        .AddCompare("text-brand-light-interaction dark:text-brand-dark-interaction", NavItem.State, MenuItemState.Active)
        .AddCompare("text-typography-disabled dark:text-typography-dark-disabled", NavItem.State, MenuItemState.Disabled)
        .AddIf("ml-8", NavItem.LeftIcon == null)
        .ToString();

    private string BadgeClassNames => new ClassBuilder("rounded-full font-bold")
        .AddIf("text-typography-body dark:text-typography-dark-body group-hover:text-feedback-brand-contrast dark:group-hover:text-feedback-brand-dark-contrast bg-neutral-background-faded dark:bg-neutral-background-dark-faded group-hover:bg-feedback-brand-background dark:group-hover:bg-feedback-brand-dark-background", NavItem.State is MenuItemState.Default or MenuItemState.Opened)
        .AddIf("text-feedback-brand-contrast dark:text-feedback-brand-dark-contrast", NavItem.State is MenuItemState.ActiveClosed or MenuItemState.ActiveOpened)
        .AddCompare("text-feedback-brand-contrast dark:text-feedback-brand-dark-contrast bg-feedback-brand-background dark:bg-feedback-brand-dark-background", NavItem.State, MenuItemState.Active)
        .AddCompare("text-typography-body dark:text-typography-dark-body bg-neutral-background-faded dark:bg-neutral-background-dark-faded", NavItem.State, MenuItemState.Disabled)
        .ToString();

    private string RightIconClassNames => new ClassBuilder("flex items-center")
        .AddIf("text-typography-icon dark:text-typography-dark-icon group-hover:text-brand-light-interaction", NavItem.State is MenuItemState.Default or MenuItemState.Opened && string.IsNullOrWhiteSpace(NavItem.RightIconColor))
        .AddIf("text-brand-light-interaction", NavItem.State is MenuItemState.ActiveClosed or MenuItemState.ActiveOpened && string.IsNullOrWhiteSpace(NavItem.RightIconColor))
        .AddIf("text-brand-light-interaction", NavItem.State is MenuItemState.Active && string.IsNullOrWhiteSpace(NavItem.RightIconColor))
        .AddIf("text-typography-disabled", NavItem.State is MenuItemState.Disabled && string.IsNullOrWhiteSpace(NavItem.RightIconColor))
        .AddIf(NavItem.RightIconColor!, !string.IsNullOrWhiteSpace(NavItem.RightIconColor))
        .ToString();

    private bool IsCollapsable => NavItem.Children?.Count() > 0;
    public IIcon? RightIcon => IsCollapsable ? NavItem.State is MenuItemState.Opened or MenuItemState.ActiveOpened ? AnronIcons.ChevronUp : AnronIcons.ChevronDown : NavItem.RightIcon;

    private new async Task OnClick()
    {
        await base.OnClick.InvokeAsync();
        if(!string.IsNullOrWhiteSpace(NavItem.Uri))
            Nav.NavigateTo(NavItem.Uri);
    }
}