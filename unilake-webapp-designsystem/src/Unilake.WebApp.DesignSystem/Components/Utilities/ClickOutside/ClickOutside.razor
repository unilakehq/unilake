@*
    Original source: https://github.com/TabBlazor/TabBlazor/blob/master/src/TabBlazor/Components/Utilities/ClickOutside/ClickOutside.razor
    MIT License
    Copyright (c) 2020 Joakim Dang√•rden
*@
@using Microsoft.JSInterop
@inject IJSRuntime JsRuntime;
@implements IAsyncDisposable
@namespace Unilake.WebApp.DesignSystem.Components

<span id="@Id" @attributes="@Attributes" @onclick="AddClickOutsideHandler">
    @ChildContent
</span>

@code {
    private string Id { get; set; } = Guid.NewGuid().ToString();

    /// <summary>
    ///     If the clickhandler shall be registered when the component is rendered or when the component is clicked.
    ///     Default is RegisterStrategy.OnClick.
    /// </summary>
    [Parameter]
    public RegisterStrategy Strategy { get; set; } = RegisterStrategy.OnClick;

    public enum RegisterStrategy
    {
        OnClick = 1,
        OnRender = 2
    }

    /// <summary>
    ///     Number of clicks received one or many
    ///     If ConcurrenceStrategy.One the eventhandler is unregistered after the first click outside.
    ///     To reduce stress on blazor use RegisterStrategy= OnClick and Concurrence=One
    /// Default is ConcurrenceStrategy.One
    /// </summary>
    [Parameter]
    public ConcurrenceStrategy Concurrence { get; set; } = ConcurrenceStrategy.One;

    public enum ConcurrenceStrategy
    {
        One = 1,
        Many = 2
    }

    [Parameter(CaptureUnmatchedValues = true)]
    public IReadOnlyDictionary<string, object> Attributes { get; set; }

    [Parameter]
    public EventCallback OnClickOutside { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [JSInvokable]
    public async Task InvokeClickOutside()
    {
        await OnClickOutside.InvokeAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && Strategy == RegisterStrategy.OnRender)
        {
            await JsRuntime.InvokeVoidAsync("unilake.clickOutsideHandler.addEvent", Id, Concurrence == ConcurrenceStrategy.One, DotNetObjectReference.Create(this));
        }
    }

    public async ValueTask DisposeAsync()
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("unilake.clickOutsideHandler.removeEvent", Id);
        }
        catch (Exception)
        {
        }
    }

    private async Task AddClickOutsideHandler()
    {
        if (Strategy == RegisterStrategy.OnClick)
        {
            await JsRuntime.InvokeVoidAsync("unilake.clickOutsideHandler.addEvent", Id, Concurrence == ConcurrenceStrategy.One, DotNetObjectReference.Create(this));
        }
    }

}