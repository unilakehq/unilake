@namespace Unilake.WebApp.DesignSystem.Components
@inherits UnilakeBaseComponent

<button Tag="@HtmlTag"
        class="@ClassNames"
        type="@InputType"
        href="@Href"
        value="@Text"
        @onclick="OnClick"
        @attributes="@UnmatchedParameters"
        disabled="@(IsDisabled)">

    @if (LeftIcon != null)
    {
        <Icon IconInstance="LeftIcon" Size="IconSize"></Icon>
    }
    @if (ChildContent == null)
    {
        @Text
    }
    else
    {
        @ChildContent
    }
    @if (RightIcon != null && !IsLoading)
    {
        <Icon IconInstance="RightIcon" Size="IconSize"></Icon>
    }
    else if (IsLoading)
    {
        <Spinner Size="Spinner.SpinnerSize.Small"/>
    }

</button>

@code {
    [Parameter] public string Text { get; set; } = string.Empty;
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsIcon { get; set; }
    [Parameter] public bool IsLoading { get; set; }

    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Default;
    [Parameter] public ButtonType Type { get; set; } = ButtonType.Button;
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Alpha;
    [Parameter] public IIcon? LeftIcon { get; set; }
    [Parameter] public IIcon? RightIcon { get; set; }
    [Parameter] public string LinkTo { get; set; } = string.Empty;

    private string HtmlTag => Type switch
    {
        ButtonType.Input => "input",
        ButtonType.Link => "a",
        ButtonType.Submit => "input",
        ButtonType.Reset => "input",
        _ => "button"
    };

    private string InputType => Type switch
    {
        ButtonType.Input => "button",
        ButtonType.Button => "button",
        ButtonType.Submit => "submit",
        ButtonType.Reset => "reset",
        _ => string.Empty
    };

    private int IconSize => Size switch
    {
        ButtonSize.Default => 16,
        ButtonSize.Large => 20,
        _ => 12
    };

    private string SizeClass() => new ClassBuilder()
        .AddCompare("px-4 py-1 text-small", Size, ButtonSize.XSmall)
        .AddCompare("px-4 py-2 text-small", Size, ButtonSize.Small)
        .AddCompare("px-5 py-3 text-default", Size, ButtonSize.Default)
        .AddCompare("px-6 py-4 text-large", Size, ButtonSize.Large)
        .ToString();

    private string Href => Type == ButtonType.Link
        ? LinkTo
        : string.Empty;

    protected override string ClassNames => ClassBuilder
        .AddIf("font-semibold leading-normal me-2 overflow-hidden items-center justify-start inline-flex gap-2 justify-center flex", Variant != ButtonVariant.Custom)
        .AddCompare("text-neutral-0 bg-brand-alpha-300 " +
                    "hover:bg-brand-light-interaction-hover dark:hover:bg-brand-dark-interaction-hover " +
                    "focus:bg-brand-light-interaction-hover dark:focus:bg-brand-dark-interaction-hover ring-brand-light-interaction-focus/25 dark:ring-brand-dark-interaction-focus/25 focus:ring-2 focus:outline-none " +
                    "", Variant, ButtonVariant.Alpha)
        .AddCompare("bg-neutral-background-default dark:bg-neutral-background-dark-default " +
                    "text-typography-headline dark:text-typography-dark-headline " +
                    "border border-neutral-background-border-divider dark:border-neutral-background-dark-border-divider bg-neutral-background-default dark:bg-neutral-background-dark-default " +
                    "stroke-neutral-background-border-divider dark:stroke-neutral-background-dark-border-divider border-1 " +
                    "hover:text-brand-alpha-300 dark:hover:text-brand-alpha-300 hover:bg-neutral-background-faded dark:hover:bg-neutral-background-dark-faded " +
                    "ring-brand-light-interaction-focus/25 focus:ring-2 focus:bg-neutral-background-default dark:focus:bg-neutral-background-dark-default focus:outline-none " +
                    "", Variant, ButtonVariant.Bravo)
        .AddCompare("text-neutral-0 stroke-neutral-background-border-divider border-1 " +
                    "bg-brand-light-link hover:bg-feedback-info-background focus:bg-feedback-info-text " +
                    "rounded-tr-lg rounded-br-lg " +
                    "", Variant, ButtonVariant.Filter)
        .AddCompare("text-neutral-background-invert dark:text-neutral-background-dark-invert " +
                    "stroke-neutral-background-border-divider dark:stroke-neutral-background-dark-border-divider " +
                    "border-1 focus:ring-2 focus:outline-none " +
                    "bg-neutral-background-default dark:bg-neutral-background-dark-default " +
                    "hover:bg-feedback-info-background dark:hover:bg-feedback-info-dark-background " +
                    "hover:text-neutral-background-default dark:hover:text-neutral-background-default " +
                    "focus:text-neutral-background-default dark:focus:text-neutral-background-default " +
                    "focus:bg-feedback-info-text dark:focus:bg-feedback-info-dark-text" +
                    "", Variant, ButtonVariant.FilterActive)
        .AddCompare("text-neutral-0 stroke-neutral-background-border-divider border-1 " +
                    "bg-brand-light-link hover:bg-feedback-info-background focus:bg-feedback-info-text " +
                    "rounded-tr-lg rounded-br-lg " +
                    "", Variant, ButtonVariant.FilterSearch)
        .AddIf(SizeClass(), Variant != ButtonVariant.Custom)
        .AddIf("cursor-not-allowed", IsDisabled || IsLoading)
        .AddIf("rounded-full", IsIcon)
        .AddIf("rounded-lg", !IsIcon &&
                             Variant != ButtonVariant.Custom &&
                             Variant != ButtonVariant.FilterSearch)
        .ToString();
}