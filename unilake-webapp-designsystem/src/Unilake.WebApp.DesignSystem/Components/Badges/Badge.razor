@namespace Unilake.WebApp.DesignSystem.Components
@inherits UnilakeBaseComponent

<div class="@ClassNames">
      @if (LeftIcon != null)
      {
            <span class="mr-1 @IconClassNames()">
                  <Icon IconInstance="LeftIcon" Size="@IconSize()"></Icon>
            </span>
      }
      @if (!string.IsNullOrWhiteSpace(LabelText))
      {
            <div class="@TextClassNames()">@LabelText</div>
      }
      else if (ChildContent != null)
      {
            <div class="@TextClassNames()">@ChildContent</div>
      }
      @if (IsClosable)
      {
            <span class="ml-1 @IconClassNames(true)">
                  <Icon IconInstance="AnronIcons.Cross" Size="@IconSize()"
                        @onclick="() => ToggleState(BadgeEvent.Closed)"></Icon>
            </span>
      }
      @if (IsAcceptable)
      {
            <span class="ml-1 @IconClassNames(false)">
                  <Icon IconInstance="AnronIcons.Check" Size="@IconSize()"
                        @onclick="() => ToggleState(BadgeEvent.Accepted)"></Icon>
            </span>
      }
</div>

@code {
      [Parameter] public BadgeSize Size { get; set; } = BadgeSize.Large;
      [Parameter] public IIcon? LeftIcon { get; set; }
      [Parameter] public bool IsClosable { get; set; }
      [Parameter] public bool IsAcceptable { get; set; }
      [Parameter] public BadgeStyle BadgeStyle { get; set; } = BadgeStyle.Default;
      [Parameter] public BadgeTheme BadgeTheme { get; set; } = BadgeTheme.Brand;
      [Parameter] public string UserInputStyleName { get; set; } = string.Empty;
      [Parameter] public string LabelText { get; set; } = string.Empty;
      [Parameter] public EventCallback<BadgeEvent> StateChanged { get; set; }

      private async Task ToggleState(BadgeEvent badgeEvent)
      {
            await StateChanged.InvokeAsync(badgeEvent);
            await OnClick.InvokeAsync();
      }

      private int IconSize() => Size switch
      {
            BadgeSize.Small => 12,
            BadgeSize.Large => 16,
            _ => throw new ArgumentOutOfRangeException()
      };

      protected override string ClassNames => ClassBuilder
            .Add("items-center inline-flex")
            .AddCompare(ClassNamesDefault(), BadgeStyle, BadgeStyle.Default)
            .AddCompare(ClassNamesPrimaryOrSecondary(), BadgeStyle, BadgeStyle.Primary)
            .AddCompare(ClassNamesPrimaryOrSecondary(), BadgeStyle, BadgeStyle.Secondary)
            .AddCompare("h-5 px-2 py-1", Size, BadgeSize.Small)
            .AddCompare("h-6 px-3 py-1", Size, BadgeSize.Large)
            .ToString();

      private string ClassNamesDefault() => new ClassBuilder("rounded-md")
            .AddCompare("bg-feedback-info-background dark:bg-feedback-info-dark-background", BadgeTheme, BadgeTheme.Info)
            .AddCompare("bg-brand-bravo-100", BadgeTheme, BadgeTheme.Filter)
            .AddCompare("bg-feedback-error-background dark:bg-feedback-error-dark-background", BadgeTheme, BadgeTheme.Error)
            .AddCompare("bg-feedback-brand-background dark:bg-feedback-brand-dark-background text-feedback-brand-contrast dark:text-feedback-brand-dark-contrast", BadgeTheme, BadgeTheme.Brand)
            .AddCompare("bg-feedback-success-background dark:bg-feedback-success-dark-background", BadgeTheme, BadgeTheme.Success)
            .AddCompare("bg-feedback-warning-background dark:bg-feedback-warning-dark-background", BadgeTheme, BadgeTheme.Warning)
            .AddCompare("bg-neutral-background-faded dark:bg-neutral-background-dark-faded", BadgeTheme, BadgeTheme.Neutral)
            .AddCompare(BadgeUserInputTheme.GetBackgroundColor(UserInputStyleName), BadgeTheme, BadgeTheme.UserInput)
            .ToString();

      private string ClassNamesPrimaryOrSecondary() => new ClassBuilder("rounded border-l-2")
            .AddCompare("bg-neutral-background-default dark:bg-neutral-background-dark-default", BadgeStyle, BadgeStyle.Primary)
            .AddCompare("bg-neutral-background-faded dark:bg-neutral-background-dark-faded", BadgeStyle, BadgeStyle.Secondary)
            .AddCompare("border-feedback-info-background dark:border-feedback-info-dark-background", BadgeTheme, BadgeTheme.Info)
            .AddCompare("border-brand-light-interaction dark:border-brand-dark-interaction", BadgeTheme, BadgeTheme.Brand)
            .AddCompare("border-feedback-error-text dark:border-feedback-error-dark-text", BadgeTheme, BadgeTheme.Error)
            .AddCompare("", BadgeTheme, BadgeTheme.Neutral)
            .AddCompare("border-feedback-success-text dark:border-feedback-success-dark-text", BadgeTheme, BadgeTheme.Success)
            .AddCompare("border-feedback-warning-background dark:border-feedback-warning-dark-background", BadgeTheme, BadgeTheme.Warning)
            .AddCompare(BadgeUserInputTheme.GetBorderColor(UserInputStyleName), BadgeTheme, BadgeTheme.UserInput)
            .ToString();

      private string TextClassNames() => new ClassBuilder("font-medium")
            .AddCompare("text-small", Size, BadgeSize.Small)
            .AddCompare("text-medium", Size, BadgeSize.Large)
            .AddCompare(TextClassNamesDefault(), BadgeStyle, BadgeStyle.Default)
            .AddCompare("text-typography-body dark:text-typography-dark-body", BadgeStyle, BadgeStyle.Primary)
            .AddCompare("text-typography-body dark:text-typography-dark-body",BadgeStyle, BadgeStyle.Secondary)
            .ToString();

      private string TextClassNamesDefault() => new ClassBuilder()
            .AddCompare("text-feedback-brand-contrast dark:text-feedback-brand-dark-contrast", BadgeTheme, BadgeTheme.Brand)
            .AddCompare("text-feedback-info-contrast dark:text-feedback-info-dark-contrast", BadgeTheme, BadgeTheme.Info)
            .AddCompare("text-feedback-info-text", BadgeTheme, BadgeTheme.Filter)
            .AddCompare("text-feedback-error-contrast dark:text-feedback-error-dark-contrast", BadgeTheme, BadgeTheme.Error)
            .AddCompare("text-feedback-success-contrast dark:text-feedback-success-dark-contrast", BadgeTheme, BadgeTheme.Success)
            .AddCompare("text-feedback-warning-contrast dark:text-feedback-warning-dark-contrast", BadgeTheme, BadgeTheme.Warning)
            .AddCompare("text-feedback-info-contrast dark:text-feedback-info-dark-contrast", BadgeTheme, BadgeTheme.Neutral)
            .AddCompare(BadgeUserInputTheme.GetTextColor(UserInputStyleName), BadgeTheme, BadgeTheme.UserInput)
            .ToString();

      private string IconClassNames(bool? isAccept = null) => new ClassBuilder()
            .Add(TextClassNames())
            .AddIf("hover:text-feedback-error-text dark:hover:text-feedback-error-dark-text", isAccept.HasValue && isAccept.Value)
            .AddIf("hover:text-feedback-success-text dark:hover:text-feedback-success-dark-text", isAccept.HasValue && !isAccept.Value)
            .AddIf("hover:bg-brand-alpha-100 dark:hover:bg-brand-alpha-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Brand)
            .AddIf("hover:bg-brand-bravo-100 dark:hover:bg-brand-bravo-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Info)
            .AddIf("hover:bg-feedback-error-100 dark:hover:bg-feedback-error-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Error)
            .AddIf("hover:bg-feedback-success-100 dark:hover:bg-feedback-success-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Success)
            .AddIf("hover:bg-feedback-warning-100 dark:hover:bg-feedback-warning-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Warning)
            .AddIf("hover:bg-neutral-100 dark:hover:bg-neutral-100", isAccept.HasValue && BadgeTheme == BadgeTheme.Neutral)
            .AddIf(BadgeUserInputTheme.GetTextInteraction(UserInputStyleName), isAccept.HasValue && BadgeTheme == BadgeTheme.UserInput)
            .ToString();

}