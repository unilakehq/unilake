@namespace Unilake.WebApp.DesignSystem.Components
@inherits UnilakeBaseComponent

<ClickOutside OnClickOutside="Toggle" IsEnabled="_isDropdownVisible" Strategy="ClickOutside.RegisterStrategy.OnClick">
    @* flex-col inline-flex items-end *@
    <div class="relative">
        <div>
            @if (!string.IsNullOrWhiteSpace(CustomButtonClass))
            {
                <Button Size="ButtonSize" class="@CustomButtonClass" Variant="ButtonVariant.Custom" @onclick="Toggle" RightIcon="GetRightIcon()">
                    @ButtonText
                </Button>
            }
            else if (CustomButton != null)
            {
                @CustomButton
            }
            else
            {
                <Button Size="ButtonSize" LeftIcon="ButtonLeftIcon" Variant="ButtonVariant" @onclick="Toggle" RightIcon="GetRightIcon()">
                    @ButtonText
                </Button>
            }
        </div>
        <div class="@ClassNames">
            @ChildContent
        </div>
    </div>
</ClickOutside>

@code {
    [Parameter] public string ButtonText { get; set; } = "Button Text";
    [Parameter] public IIcon? ButtonLeftIcon { get; set; }
    [Parameter] public ButtonVariant ButtonVariant { get; set; } = ButtonVariant.Bravo;

    [Parameter]
    public ButtonSize ButtonSize { get; set; } = ButtonSize.Default;

    [Parameter] public DropdownHorizontalAlign Align { get; set; } = DropdownHorizontalAlign.Right;

    [Parameter] public string CustomButtonClass { get; set; } = string.Empty;

    [Parameter] public RenderFragment? CustomButton { get; set; }

    private bool _isDropdownVisible;
    private IIcon GetRightIcon() => _isDropdownVisible ? AnronIcons.ChevronUp : AnronIcons.ChevronDown;

    public Task Toggle()
    {
        _isDropdownVisible = !_isDropdownVisible;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override string ClassNames => ClassBuilder
        .Add("absolute z-20")
        .AddCompare("top-10", ButtonSize, ButtonSize.XSmall)
        .AddCompare("top-12", ButtonSize, ButtonSize.Small)
        .AddCompare("top-14", ButtonSize, ButtonSize.Default)
        .AddCompare("top-16", ButtonSize, ButtonSize.Large)
        .AddCompare("right-0", Align, DropdownHorizontalAlign.Left)
        .AddCompare("left-0", Align, DropdownHorizontalAlign.Right)
        .AddIf("hidden", !_isDropdownVisible).ToString();
}