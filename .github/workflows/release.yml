name: Release

on:
  push:
    tags:
        - "v*"
  #schedule:
  #  - cron: "0 22 * * *"
  workflow_dispatch:
    inputs:
      tags:
        description: The tags to be released
        required: false
        type: string

permissions:
  id-token: write
  pull-requests: write
  checks: write
  statuses: write
  contents: write

env:
  BUILD_PROFILE: release

jobs:
  create_release:
    name: create release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.generated-tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Get latest tag
        id: get-latest-tag
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "tag=`gh release list -L 1 | cut -f 1`" >> $GITHUB_OUTPUT
      - name: Bump version
        id: generated-tag
        uses: actions/github-script@v6
        with:
          script: |
            if (context.ref.startsWith("refs/tags/")) {
              let tag = context.ref.replace("refs/tags/", "");
              core.setOutput('tag', tag);
              console.log(`This event pushed a tag ${tag}, return directly.`)
              return
            }

            if ("${{ github.event.inputs.tags }}") {
              let tag = "${{ github.event.inputs.tags }}";
              core.setOutput('tag', tag);
              console.log(`This event triggered by workflow_dispatch with a tag ${tag}, return directly.`)
              return
            }

            let tag = "${{ steps.get-latest-tag.outputs.tag }}";
            let result = /v(\d+)\.(\d+)\.(\d+)/g.exec(tag);
            if (result === null) {
              throw `The previous tag ${{ steps.get-latest-tag.outputs.tag }} is invalid, ignoring`;
            }

            let major = result[1];
            let minor = result[2];
            let patch = (parseInt(result[3]) + 1).toString();
            let next_tag = `v${major}.${minor}.${patch}-nightly`;

            console.log(`This event is triggered, return generated ${next_tag}.`)
            core.setOutput('tag', next_tag)
      - name: Create github release if not exist
        # Only create release when the tag does not exist
        if: 'steps.generated-tag.outputs.tag != steps.get-latest-tag.outputs.tag'
        # Allow this action failure
        # continue-on-error: true
        # Reference: https://cli.github.com/manual/gh_release_create
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          echo "Create a release for ${{ steps.generated-tag.outputs.tag }}"
          gh release create ${{ steps.generated-tag.outputs.tag }} --generate-notes -p  
    
  cli:
    runs-on: ubuntu-latest
    name: cli release
    needs: create_release
    steps:
        - name: Checkout
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Setup Docker
          uses: ./.github/actions/setup_docker
        - name: Build and release CLI
          uses: ./.github/actions/build_cli
          env:
            AWS_ACCESS_KEY_ID: ${{ secrets.CLI_S3_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY: ${{ secrets.CLI_S3_SECRET_ACCESS_KEY }}
            AWS_DEFAULT_REGION: ${{ secrets.CLI_S3_DEFAULT_REGION }}
            AWS_ENDPOINT_URL: ${{ secrets.CLI_S3_ENDPOINT_URL }}
            AWS_PROVIDER: ${{ secrets.CLI_S3_PROVIDER }}
            AWS_BUCKET: ${{ secrets.CLI_S3_BUCKET }}
          with:
            version: ${{ needs.create_release.outputs.version }}
            target: release